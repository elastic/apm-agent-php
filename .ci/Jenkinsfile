#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'linux && immutable' }
  environment {
    REPO = 'apm-agent-php'
    BASE_DIR = "src/go.elastic.co/apm/${env.REPO}"
    NOTIFY_TO = credentials('notify-to')
    JOB_GCS_BUCKET = credentials('gcs-bucket')
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger('(?i).*jenkins\\W+run\\W+(?:the\\W+)?tests(?:\\W+please)?.*')
  }
  stages {
    stage('Checkout') {
      options { skipDefaultCheckout() }
      steps {
        pipelineManager([ cancelPreviousRunningBuilds: [ when: 'PR' ] ])
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}", githubNotifyFirstTimeContributor: true)
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
        script {
          dir("${BASE_DIR}"){
            // Skip all the stages except docs for PR's with asciidoc and md changes only
            env.ONLY_DOCS = isGitRegionMatch(patterns: [ '.*\\.(asciidoc|md)' ], shouldMatchAll: true)
          }
        }
      }
    }
    stage('BuildAndTest') {
      when {
        beforeAgent true
        expression { return env.ONLY_DOCS == "false" }
      }
      matrix {
        agent { label 'linux && immutable' }
        options { skipDefaultCheckout() }
        axes {
          axis {
            name 'PHP_VERSION'
            values '7.2', '7.3', '7.4'
          }
        }
        stages {
          stage('Build') {
            steps {
              withGithubNotify(context: "Build-${PHP_VERSION}") {
                deleteDir()
                unstash 'source'
                dir("${BASE_DIR}"){
                  retry(3) {
                    sleep randomNumber(min: 2, max: 5)
                    sh script: "docker build --build-arg PHP_VERSION=${PHP_VERSION} --tag test-php:${PHP_VERSION} .", label: 'prepare docker image'
                  }
                  sh script: "docker run --rm -u \$(id -u):\$(id -g) -t -v \$(pwd):/app test-php:${PHP_VERSION}", label: 'run build'
                }
              }
            }
          }
          stage('Test') {
            steps {
              withGithubNotify(context: "Test-${PHP_VERSION}", tab: 'tests') {
                dir("${BASE_DIR}"){
                  sh script: "docker run --rm -u \$(id -u):\$(id -g) -t -v \$(pwd):/app test-php:${PHP_VERSION} make test", label: 'run tests'
                }
              }
            }
            post {
              always {
                junit(allowEmptyResults: true, keepLongStdio: true, testResults: "${BASE_DIR}/junit.xml")
              }
            }
          }
          stage('Install') {
            steps {
              withGithubNotify(context: "Install-${PHP_VERSION}") {
                dir("${BASE_DIR}"){
                  sh script: "docker run --rm -t -v \$(pwd):/app test-php:${PHP_VERSION} make install", label: 'run install'
                }
              }
            }
          }
        }
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult()
    }
  }
}
