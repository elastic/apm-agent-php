#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'linux && docker && ubuntu-18.04 && immutable' }
  environment {
    REPO = 'apm-agent-php'
    BASE_DIR = "src/go.elastic.co/apm/${env.REPO}"
    SLACK_CHANNEL = '#apm-agent-php'
    NOTIFY_TO = 'build-apm+apm-agent-php@elastic.co'
    ONLY_DOCS = "false"
  }
  options {
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger('(?i).*jenkins\\W+run\\W+(?:the\\W+)?tests(?:\\W+please)?.*')
  }
  stages {
    stage('Initializing'){
      options {
        skipDefaultCheckout()
        timeout(time: 1, unit: 'HOURS')
      }
      stages {
        stage('Checkout') {
          steps {
            pipelineManager([ cancelPreviousRunningBuilds: [ when: 'PR' ] ])
            deleteDir()
            gitCheckout(basedir: "${BASE_DIR}", githubNotifyFirstTimeContributor: true)
            stash allowEmpty: true, name: 'source', useDefaultExcludes: false
            dir("${BASE_DIR}"){
              // Skip all the stages except docs for PR's with asciidoc and md changes only
              whenTrue(isPR()) {
                setEnvVar('ONLY_DOCS', isGitRegionMatch(patterns: [ '.*\\.(asciidoc|md|png)' ], shouldMatchAll: true))
              }
            }
          }
        }
        stage('BuildAndTest') {
          when {
            beforeAgent true
            expression { return env.ONLY_DOCS == "false" }
          }
          failFast false
          matrix {
            agent { label 'linux && docker && ubuntu-18.04 && immutable' }
            options { skipDefaultCheckout() }
            axes {
              axis {
                name 'PHP_VERSION'
                values '7.2', '7.3', '7.4'
              }
              axis {
                name 'DOCKERFILE'
                values 'Dockerfile', 'Dockerfile.alpine'
              }
            }
            stages {
              stage('Build') {
                steps {
                  withGithubNotify(context: "Build-${PHP_VERSION}") {
                    deleteDir()
                    unstash 'source'
                    dir("${BASE_DIR}"){
                      // When running in the CI with multiple parallel stages
                      // the access could be considered as a DDOS attack.
                      retryWithSleep(retries: 3, seconds: 5, backoff: true) {
                        sh script: "PHP_VERSION=${PHP_VERSION} DOCKERFILE=${DOCKERFILE} make -f .ci/Makefile prepare", label: 'prepare docker image'
                      }
                      sh script: "PHP_VERSION=${PHP_VERSION} DOCKERFILE=${DOCKERFILE} make -f .ci/Makefile build", label: 'build'
                    }
                  }
                }
              }
              stage('PHPT Tests') {
                steps {
                  withGithubNotify(context: "PHPT-Tests-${PHP_VERSION}", tab: 'tests') {
                    dir("${BASE_DIR}"){
                      sh script: "PHP_VERSION=${PHP_VERSION} DOCKERFILE=${DOCKERFILE} make -f .ci/Makefile test", label: 'test'
                    }
                  }
                }
                post {
                  always {
                    junit(allowEmptyResults: true, keepLongStdio: true, testResults: "${BASE_DIR}/junit.xml")
                  }
                }
              }
              stage('Generate for package') {
                steps {
                  withGithubNotify(context: "Generate-For-Package-${PHP_VERSION}") {
                    dir("${BASE_DIR}"){
                      sh script: "PHP_VERSION=${PHP_VERSION} DOCKERFILE=${DOCKERFILE} make -f .ci/Makefile generate-for-package", label: 'generate-for-package'
                      stash includes: 'src/ext/modules/*.so', name: "generate-for-package-${PHP_VERSION}-${DOCKERFILE}"
                    }
                  }
                }
              }
              stage('PHPUnit Tests') {
                steps {
                  withGithubNotify(context: "PHPUnit-Tests-${PHP_VERSION}", tab: 'tests') {
                    dir("${BASE_DIR}"){
                      sh script: "PHP_VERSION=${PHP_VERSION} DOCKERFILE=${DOCKERFILE} make -f .ci/Makefile composer", label: 'composer'
                    }
                  }
                }
                post {
                  always {
                    junit(allowEmptyResults: true, keepLongStdio: true, testResults: "${BASE_DIR}/**/log_as_junit.xml")
                  }
                }
              }
            }
          }
        }
        stage('Package Generation') {
          when {
            beforeAgent true
            expression { return env.ONLY_DOCS == "false" }
          }
          options { skipDefaultCheckout() }
          steps {
            withGithubNotify(context: "Package", tab: 'artifacts') {
              deleteDir()
              unstash 'source'
              dir("${BASE_DIR}"){
                unstash 'generate-for-package-7.2-Dockerfile'
                unstash 'generate-for-package-7.3-Dockerfile'
                unstash 'generate-for-package-7.4-Dockerfile'
                unstash 'generate-for-package-7.2-Dockerfile.alpine'
                unstash 'generate-for-package-7.3-Dockerfile.alpine'
                unstash 'generate-for-package-7.4-Dockerfile.alpine'
                sh script: "make -C packaging package", label: 'package'
                sh script: "make -C packaging info", label: 'package info'
                // checksum files are regenerated by the signing component in the internal-ci instance.
                stash(includes: 'build/packages/*', name: 'package', excludes: 'build/packages/**/*.sha512')
              }
            }
          }
          post {
            always {
              dir("${BASE_DIR}"){
                archiveArtifacts(allowEmptyArchive: true, artifacts: 'build/packages/*')
              }
            }
          }
        }
        stage('Package-Test') {
          when {
            beforeAgent true
            expression { return env.ONLY_DOCS == "false" }
          }
          failFast false
          matrix {
            agent { label 'linux && docker && ubuntu-18.04 && immutable' }
            options { skipDefaultCheckout() }
            axes {
              axis {
                name 'PHP_VERSION'
                values '7.2', '7.3', '7.4'
              }
            }
            stages {
              stage('Package Test') {
                steps {
                  withGithubNotify(context: "Package-Test-${PHP_VERSION}") {
                    deleteDir()
                    unstash 'source'
                    dir("${BASE_DIR}"){
                      unstash 'package'
                      sh script: "PHP_VERSION=${PHP_VERSION} make -C packaging install", label: 'package install'
                    }
                  }
                }
                post {
                  always {
                    junit(allowEmptyResults: true, keepLongStdio: true, testResults: "${BASE_DIR}/**/log_as_junit.xml")
                  }
                }
              }
            }
          }
        }
        stage('Testing') {
          when {
            beforeAgent true
            // TODO: && false in place to disable this particular section for the time being.
            //       as agreed to avoid any misleading until this particular section has been implemented.
            expression { return env.ONLY_DOCS == "false" && false }
          }
          matrix {
            // TODO: This should be uncommented out when the implementation is in place
            // agent { label 'linux && docker && ubuntu-18.04 && immutable' }
            options { skipDefaultCheckout() }
            axes {
              axis {
                name 'PHP_VERSION'
                values '7.2', '7.3', '7.4'
              }
              axis {
                name 'FRAMEWORK'
                values 'nginx', 'apache', 'redis', 'memcached', 'mysql'
              }
            }
            stages {
              stage('Install') {
                steps {
                  // TODO: This should be uncommented out when the implementation is in place
                  // deleteDir()
                  // unstash 'source'
                  dir("${BASE_DIR}"){
                    echo 'TBD'
                  }
                }
              }
              stage('Test') {
                steps {
                  // TODO: This should be uncommented out when the implementation is in place
                  // deleteDir()
                  // unstash 'source'
                  dir("${BASE_DIR}"){
                    sh 'scripts/test-framework.sh ${PHP_VERSION} ${FRAMEWORK}'
                  }
                }
                post {
                  always {
                    junit(allowEmptyResults: true, keepLongStdio: true, testResults: "${BASE_DIR}/junit.xml")
                  }
                }
              }
            }
            post {
              always {
                echo 'STORE docker logs'
              }
            }
          }
        }
      }
    }
    // This meta-stage happens in the internal-ci instance to be able to sign the artifacts correctly.
    stage('Release') {
      options {
        skipDefaultCheckout()
        timeout(time: 12, unit: 'HOURS')
      }
      when {
        beforeAgent true
        allOf {
          tag pattern: 'v\\d+.*', comparator: 'REGEXP'
          expression { isInternalCI() }
        }
      }
      agent { label 'linux && docker && ubuntu-18.04 && immutable' }
      environment {
        BUCKET_NAME = 'internal-ci-artifacts'
        BUCKET_SUBFOLDER = "${env.REPO}/${env.TAG_NAME}"
        BUCKET_PATH = "gs://${env.BUCKET_NAME}/${env.BUCKET_SUBFOLDER}"
        BUCKET_CREDENTIALS = 'internal-ci-gcs-plugin'
        SIGNED_ARTIFACTS = 'signed-artifacts'
        BUCKET_SUBFOLDER_SIGNED_ARTIFACTS = "${env.BUCKET_SUBFOLDER}/${env.SIGNED_ARTIFACTS}"
        BUCKET_SIGNED_ARTIFACTS_PATH = "gs://${env.BUCKET_NAME}/${env.BUCKET_SUBFOLDER_SIGNED_ARTIFACTS}"
        RELEASE_URL_MESSAGE = "(<https://github.com/elastic/apm-agent-php/releases/tag/${env.TAG_NAME}|${env.TAG_NAME}>)"
      }
      stages {
        stage('Notify') {
          options { skipDefaultCheckout() }
          steps {
            notifyStatus(slackStatus: 'warning', subject: "[${env.REPO}] Release ready to be pushed",
                         body: "Please (<${env.BUILD_URL}input|approve>) it or reject within 12 hours.\n Changes: ${env.TAG_NAME}")
            setEnvVar('RELEASE', askAndWait("You are about to release version ${env.TAG_NAME}. Do you wish to release it?"))
          }
        }
        stage('Signing CI') {
          when {
            beforeAgent true
            expression { return env.RELEASE == 'true' }
          }
          options { skipDefaultCheckout() }
          steps {
            deleteDir()
            unstash 'source'
            dir("${BASE_DIR}") {
              unstash 'package'
              googleStorageUpload(bucket: env.BUCKET_PATH,
                  credentialsId: env.BUCKET_CREDENTIALS,
                  pathPrefix: 'build/packages/',
                  pattern: 'build/packages/**/*',
                  sharedPublicly: false,
                  showInline: true)
              build(wait: true, propagate: true, job: 'elastic+unified-release+master+sign-artifacts-with-gpg', parameters: [string(name: 'gcs_input_path', value: "${env.BUCKET_PATH}")])
              dir("${SIGNED_ARTIFACTS}") {
                googleStorageDownload(bucketUri: "${env.BUCKET_SIGNED_ARTIFACTS_PATH}/*",
                    credentialsId: env.BUCKET_CREDENTIALS,
                    localDirectory: 'build/packages/',
                    pathPrefix: "${env.BUCKET_SUBFOLDER_SIGNED_ARTIFACTS}")
                stash allowEmpty: false, name: env.SIGNED_ARTIFACTS, useDefaultExcludes: false
              }
              archiveArtifacts(allowEmptyArchive: true, artifacts: "${SIGNED_ARTIFACTS}/**/*")
            }
          }
        }
        stage('Test-Signed-Package') {
          failFast false
          matrix {
            agent { label 'linux && docker && ubuntu-18.04 && immutable' }
            options { skipDefaultCheckout() }
            axes {
              axis {
                name 'PHP_VERSION'
                values '7.2', '7.3', '7.4'
              }
            }
            stages {
              stage('Release Test') {
                steps {
                  withGithubNotify(context: "Signed-Test-${PHP_VERSION}") {
                    deleteDir()
                    unstash 'source'
                    dir("${BASE_DIR}") {
                      unstash "${env.SIGNED_ARTIFACTS}"
                      sh script: "PHP_VERSION=${PHP_VERSION} make -C packaging install", label: 'package install'
                    }
                  }
                }
                post {
                  unsuccessful {
                    notifyStatus(slackStatus: 'warning', subject: "[${env.REPO}] Release *${env.TAG_NAME}* got some test failures in the installers.", body: "Please review the signed binaries are healthy (<${env.RUN_DISPLAY_URL}|Open>)")
                  }
                  always {
                    junit(allowEmptyResults: true, keepLongStdio: true, testResults: "${BASE_DIR}/**/log_as_junit.xml")
                  }
                }
              }
            }
          }
        }
        stage('Release CI') {
          when {
            beforeAgent true
            expression { return env.RELEASE == 'true' }
          }
          options { skipDefaultCheckout() }
          steps {
            deleteDir()
            unstash 'source'
            dir("${BASE_DIR}") {
              unstash "${env.SIGNED_ARTIFACTS}"
              withCredentials([string(credentialsId: '2a9602aa-ab9f-4e52-baf3-b71ca88469c7', variable: 'GITHUB_TOKEN')]) {
                sh script: 'make -f .ci/Makefile release', label: 'release'
              }
            }
          }
          post {
            success {
              notifyStatus(slackStatus: 'good', subject: "[${env.REPO}] Release *${env.TAG_NAME}* published", body: "Build: (<${env.RUN_DISPLAY_URL}|here>)\nRelease URL: ${env.RELEASE_URL_MESSAGE}")
            }
          }
        }
        stage('Test-Released-Package') {
          failFast false
          matrix {
            agent { label 'linux && docker && ubuntu-18.04 && immutable' }
            options { skipDefaultCheckout() }
            axes {
              axis {
                name 'PHP_VERSION'
                values '7.2', '7.3', '7.4'
              }
            }
            stages {
              stage('Release Test') {
                steps {
                  withGithubNotify(context: "Release-Test-${PHP_VERSION}") {
                    deleteDir()
                    unstash 'source'
                    dir("${BASE_DIR}"){
                      sh script: "PHP_VERSION=${PHP_VERSION} RELEASE_VERSION=${env.TAG_NAME.replaceAll('^v', '')} make -C packaging install-release-github", label: 'package install-release-github'
                    }
                  }
                }
                post {
                  unsuccessful {
                    notifyStatus(slackStatus: 'warning', subject: "[${env.REPO}] Release *${env.TAG_NAME}* published with some test failures in the installers.", body: "Please review the signed and released binaries are healthy\nBuild: (<${env.RUN_DISPLAY_URL}|here>)\nRelease URL: ${env.RELEASE_URL_MESSAGE}")
                  }
                  always {
                    junit(allowEmptyResults: true, keepLongStdio: true, testResults: "${BASE_DIR}/**/log_as_junit.xml")
                  }
                }
              }
            }
          }
        }
      }
      post {
        failure {
          notifyStatus(slackStatus: 'danger', subject: "[${env.REPO}] Release *${env.TAG_NAME}* failed", body: "Build: (<${env.RUN_DISPLAY_URL}|here>)")
        }
        always {
          script {
            currentBuild.description = "${currentBuild.description?.trim() ? currentBuild.description : ''} released"
          }
        }
      }
    }
  }
  post {
    cleanup {
      // Reporting disables in the `internal-ci` since credentials are not in place
      // OTOH it avoids duplicated notifications
      whenFalse(isInternalCI()){
        notifyBuildResult()
      }
    }
  }
}

// TODO: create an input step to avoid this try/catch and return true/false
def askAndWait(message) {
  try {
    input(message: message, ok: 'Yes')
    return true
  } catch(err) {
    return false
  }
}

def notifyStatus(def args = [:]) {
  slackSend(channel: env.SLACK_CHANNEL, color: args.slackStatus, message: "${args.subject}. ${args.body}",
            tokenCredentialId: 'jenkins-slack-integration-token')
  // transform slack URL format '(<URL|description>)' to 'URL'.
  def bodyEmail = args.body.replaceAll('\\(<', '').replaceAll('\\|.*>\\)', '')
  emailext(subject: args.subject, to: "${env.NOTIFY_TO}", body: bodyEmail)
}
