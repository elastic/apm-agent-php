#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'linux && immutable' }
  environment {
    REPO = 'apm-agent-php'
    BASE_DIR = "src/go.elastic.co/apm/${env.REPO}"
    NOTIFY_TO = credentials('notify-to')
    JOB_GCS_BUCKET = credentials('gcs-bucket')
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger('(?i).*jenkins\\W+run\\W+(?:the\\W+)?tests(?:\\W+please)?.*')
  }
  stages {
    stage('Checkout') {
      options { skipDefaultCheckout() }
      steps {
        pipelineManager([ cancelPreviousRunningBuilds: [ when: 'PR' ] ])
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}", githubNotifyFirstTimeContributor: true)
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
        script {
          dir("${BASE_DIR}"){
            // Skip all the stages except docs for PR's with asciidoc and md changes only
            env.ONLY_DOCS = isGitRegionMatch(patterns: [ '.*\\.(asciidoc|md|png)' ], shouldMatchAll: true)
          }
        }
      }
    }
    stage('BuildAndTest') {
      when {
        beforeAgent true
        expression { return env.ONLY_DOCS == "false" }
      }
      matrix {
        agent { label 'linux && immutable' }
        options { skipDefaultCheckout() }
        axes {
          axis {
            name 'PHP_VERSION'
            values '7.2', '7.3', '7.4'
          }
        }
        stages {
          stage('Build') {
            steps {
              withGithubNotify(context: "Build-${PHP_VERSION}") {
                deleteDir()
                unstash 'source'
                dir("${BASE_DIR}"){
                  // When running in the CI with multiple parallel stages
                  // the access could be considered as a DDOS attack.
                  retryWithSleep(retries: 3, seconds: 5, backoff: true) {
                    sh script: "PHP_VERSION=${PHP_VERSION} make -f .ci/Makefile prepare", label: 'prepare docker image'
                  }
                  sh script: "PHP_VERSION=${PHP_VERSION} make -f .ci/Makefile build", label: 'build'
                }
              }
            }
          }
          stage('Test') {
            steps {
              withGithubNotify(context: "Test-${PHP_VERSION}", tab: 'tests') {
                dir("${BASE_DIR}"){
                  sh script: "PHP_VERSION=${PHP_VERSION} make -f .ci/Makefile test", label: 'test'
                }
              }
            }
            post {
              always {
                junit(allowEmptyResults: true, keepLongStdio: true, testResults: "${BASE_DIR}/junit.xml")
              }
            }
          }
          stage('Install') {
            steps {
              withGithubNotify(context: "Install-${PHP_VERSION}") {
                dir("${BASE_DIR}"){
                  sh script: "PHP_VERSION=${PHP_VERSION} make -f .ci/Makefile install", label: 'install'
                }
              }
            }
          }
          stage('Composer') {
            steps {
              withGithubNotify(context: "Composer-${PHP_VERSION}") {
                dir("${BASE_DIR}"){
                  sh script: "PHP_VERSION=${PHP_VERSION} make -f .ci/Makefile composer", label: 'composer'
                }
              }
            }
          }
          stage('Package') {
            steps {
              withGithubNotify(context: "Package-${PHP_VERSION}") {
                dir("${BASE_DIR}"){
                  sh script: "PHP_VERSION=${PHP_VERSION} make -C packaging package", label: 'package'
                  sh script: "PHP_VERSION=${PHP_VERSION} make -C packaging info", label: 'package info'
                  sh script: "PHP_VERSION=${PHP_VERSION} make -C packaging deb-install", label: 'package deb-install'
                }
              }
            }
            post {
              always {
                dir("${BASE_DIR}"){
                  archiveArtifacts(allowEmptyArchive: true, artifacts: "build/packages/*")
                }
              }
            }
          }
        }
      }
    }
    stage('Testing') {
      when {
        beforeAgent true
        expression { return env.ONLY_DOCS == "false" }
      }
      matrix {
        // TODO: This should be uncommented out when the implementation is in place
        // agent { label 'linux && immutable' }
        options { skipDefaultCheckout() }
        axes {
          axis {
            name 'PHP_VERSION'
            values '7.2', '7.3', '7.4'
          }
          axis {
            name 'FRAMEWORK'
            values 'nginx', 'apache', 'redis', 'memcached', 'mysql'
          }
        }
        stages {
          stage('Install') {
            steps {
              // TODO: This should be uncommented out when the implementation is in place
              // deleteDir()
              // unstash 'source'
              dir("${BASE_DIR}"){
                echo 'TBD'
              }
            }
          }
          stage('Test') {
            steps {
              // TODO: This should be uncommented out when the implementation is in place
              // deleteDir()
              // unstash 'source'
              dir("${BASE_DIR}"){
                sh 'scripts/test-framework.sh ${PHP_VERSION} ${FRAMEWORK}'
              }
            }
            post {
              always {
                junit(allowEmptyResults: true, keepLongStdio: true, testResults: "${BASE_DIR}/junit.xml")
              }
            }
          }
        }
        post {
          always {
            echo 'STORE docker logs'
          }
        }
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult()
    }
  }
}
