#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'ubuntu-18.04 && immutable' }
  environment {
    REPO = 'apm-agent-php'
    BASE_DIR = "src/go.elastic.co/apm/${env.REPO}"
    SLACK_CHANNEL = '#apm-agent-php'
    NOTIFY_TO = 'build-apm+apm-agent-php@elastic.co'
    ONLY_DOCS = "false"
    GITHUB_CHECK_ITS_NAME = 'Integration Tests'
    ITS_PIPELINE = 'apm-integration-tests-selector-mbp/master'
  }
  options {
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger("${obltGitHubComments()}")
  }
  parameters {
    string(name: 'VERSION', defaultValue: '', description: "What's the version to be bumped when doing a release?")
  }
  stages {
    stage('Initializing'){
      options {
        skipDefaultCheckout()
        timeout(time: 2, unit: 'HOURS')
      }
      stages {
        stage('Checkout') {
          steps {
            whenTrue(isInternalCI() && isTag()) {
              setEnvVar('PRE_RELEASE_STAGE', 'true')
              notifyStatus(slackStatus: 'good', subject: "[${env.REPO}] Release tag *${env.TAG_NAME}* has been created", body: "Build: (<${env.RUN_DISPLAY_URL}|here>) for further details.")
            }
            whenTrue(params.VERSION?.trim() ? true : false) {
              script {
                currentBuild.description = "${currentBuild.description?.trim() ? currentBuild.description : ''} release triggered."
              }
            }
            pipelineManager([ cancelPreviousRunningBuilds: [ when: 'PR' ] ])
            deleteDir()
            gitCheckout(basedir: "${BASE_DIR}", githubNotifyFirstTimeContributor: true)
            stash allowEmpty: true, name: 'source', useDefaultExcludes: false
            dir("${BASE_DIR}"){
              // Skip all the stages except docs for PR's with asciidoc and md changes only
              whenTrue(isPR()) {
                setEnvVar('ONLY_DOCS', isGitRegionMatch(patterns: [ '.*\\.(asciidoc|md|png)' ], shouldMatchAll: true))
              }
            }
          }
        }
        stage('Prepara Release') {
          options {
            skipDefaultCheckout()
          }
          when {
            beforeAgent true
            // If not a PR and not running in the internalCI and a release with x.y format
            allOf {
              not { changeRequest() }
              not { expression { isInternalCI() } }
              expression { return (params.VERSION?.trim() && params.VERSION =~ /^\d+.\d+/) }
            }
          }
          steps {
            initWorkspace(context: 'Prepare-Release') {
                withGitRelease(credentialsId: '2a9602aa-ab9f-4e52-baf3-b71ca88469c7-UserAndToken') {
                  prepareRelease()
                }
            }
          }
        }
        stage('BuildAndTest') {
          options { skipDefaultCheckout() }
          when {
            beforeAgent true
            expression { return env.ONLY_DOCS == "false" }
          }
          failFast false
          matrix {
            agent { label 'ubuntu-18.04 && immutable' }
            axes {
              axis {
                name 'PHP_VERSION'
                values '7.2', '7.3', '7.4', '8.0'
              }
              axis {
                name 'DOCKERFILE'
                values 'Dockerfile', 'Dockerfile.alpine'
              }
            }
            stages {
              stage('Build') {
                steps {
                  initWorkspace(context: "Build-${PHP_VERSION}") {
                    // When running in the CI with multiple parallel stages
                    // the access could be considered as a DDOS attack.
                    retryWithSleep(retries: 3, seconds: 5, backoff: true) {
                        sh script: "PHP_VERSION=${PHP_VERSION} DOCKERFILE=${DOCKERFILE} make -f .ci/Makefile prepare", label: 'prepare docker image'
                    }
                    sh script: "PHP_VERSION=${PHP_VERSION} DOCKERFILE=${DOCKERFILE} make -f .ci/Makefile build", label: 'build'
                  }
                }
              }
              stage('Static check and Unit Tests') {
                steps {
                  withGithubNotify(context: "Static-Check-Unit-Tests-${PHP_VERSION}", tab: 'tests') {
                    dir("${BASE_DIR}"){
                      sh script: "PHP_VERSION=${PHP_VERSION} DOCKERFILE=${DOCKERFILE} make -f .ci/Makefile static-check-unit-test", label: 'static-check-unit-test'
                    }
                  }
                }
                post {
                  always {
                    junit(allowEmptyResults: true, keepLongStdio: true, testResults: "${BASE_DIR}/build/*junit.xml,${BASE_DIR}/phpunit-junit.xml")
                  }
                }
              }
              stage('Generate for package') {
                steps {
                  withGithubNotify(context: "Generate-For-Package-${PHP_VERSION}") {
                    dir("${BASE_DIR}"){
                      sh script: "PHP_VERSION=${PHP_VERSION} DOCKERFILE=${DOCKERFILE} make -f .ci/Makefile generate-for-package", label: 'generate-for-package'
                      stash includes: 'src/ext/modules/*.so', name: "generate-for-package-${PHP_VERSION}-${DOCKERFILE}"
                    }
                  }
                }
              }
            }
          }
        }
        stage('Integration Tests') {
          agent none
          when {
            beforeAgent true
            changeRequest()
          }
          steps {
            githubNotify(context: "${env.GITHUB_CHECK_ITS_NAME}", description: "Waiting for asynchronous job to begin ...", status: 'PENDING', targetUrl: "${env.JENKINS_URL}search/?q=${env.ITS_PIPELINE.replaceAll('/','+')}")
            build(job: env.ITS_PIPELINE, propagate: false, wait: false,
                  parameters: [ string(name: 'INTEGRATION_TEST', value: 'PHP'),
                                string(name: 'BUILD_OPTS', value: "--php-agent-version ${env.GIT_BASE_COMMIT}"),
                                string(name: 'GITHUB_CHECK_NAME', value: env.GITHUB_CHECK_ITS_NAME),
                                string(name: 'GITHUB_CHECK_REPO', value: env.REPO),
                                string(name: 'GITHUB_CHECK_SHA1', value: env.GIT_BASE_COMMIT) ])
          }
        }
        stage('Package Generation') {
          when {
            beforeAgent true
            expression { return env.ONLY_DOCS == "false" }
          }
          options { skipDefaultCheckout() }
          steps {
            initWorkspace(context: "Package", tab: 'artifacts') {
                packageGeneration(versions: ['7.2', '7.3', '7.4', '8.0'])
            }
          }
          post {
            always {
              dir("${BASE_DIR}"){
                archiveArtifacts(allowEmptyArchive: true, artifacts: 'build/packages/*')
              }
            }
          }
        }
        stage('Package lifecycle testing') {
          options { skipDefaultCheckout() }
          when {
            beforeAgent true
            expression { return env.ONLY_DOCS == "false" }
          }
          failFast false
          matrix {
            agent { label 'ubuntu-18.04 && immutable' }
            axes {
              axis {
                name 'PHP_VERSION'
                values '7.2', '7.3', '7.4', '8.0'
              }
              axis {
                name 'DIST'
                values 'apk', 'deb', 'rpm', 'tar'
              }
            }
            stages {
              stage('Lifecycle Testing') {
                steps {
                  packageWorkspace(context: "Lifecycle-Testing-${PHP_VERSION}-${DIST}", prepareGoal: "prepare-${DIST}") {
                    sh script: "PHP_VERSION=${PHP_VERSION} make -C packaging ${DIST}-lifecycle-testing", label: "${DIST}-lifecycle-testing for ${PHP_VERSION}"
                  }
                }
                post {
                  always {
                    junit(allowEmptyResults: true, keepLongStdio: true, testResults: "${BASE_DIR}/build/phpunit-*junit.xml")
                  }
                }
              }
              stage('PHP Upgrade Testing') {
                agent { label 'ubuntu-18.04 && immutable' }
                when {
                  beforeAgent true
                  allOf {
                    expression { return env.PHP_VERSION == "7.2" }
                    expression { return env.DIST == "rpm" }
                  }
                }
                steps {
                  packageWorkspace(context: "PHP-Upgrade-Testing-${DIST}", prepareGoal: "prepare-${DIST}") {
                    sh script: "make -C packaging ${DIST}-php-upgrade-testing", label: "${DIST}-php-upgrade-testing"
                  }
                }
              }
              stage('Agent Upgrade Testing') {
                agent { label 'ubuntu-18.04 && immutable' }
                when {
                  beforeAgent true
                  allOf {
                    expression { return env.PHP_VERSION == "7.4" }
                    expression { return (env.DIST == "rpm" || env.DIST == "deb") }
                  }
                }
                steps {
                  initWorkspace(context: "Agent-Upgrade-Testing-${DIST}") {
                    packageGeneration(versions: [env.PHP_VERSION], local: true)
                    unstash 'package'
                    sh script: "make -C packaging ${DIST}-agent-upgrade-testing-local", label: "${DIST}-agent-upgrade-testing-local"
                  }
                }
              }
              stage('PHP Apache Testing') {
                agent { label 'ubuntu-18.04 && immutable' }
                when {
                  beforeAgent true
                  allOf {
                    expression { return env.DIST == "deb" }
                  }
                }
                steps {
                  packageWorkspace(context: "PHP-Apache-Testing-${DIST}", prepareGoal: "prepare-${DIST}-apache") {
                    sh script: "make -C packaging ${DIST}-lifecycle-testing-in-apache", label: "${DIST}-lifecycle-testing-in-apache"
                  }
                }
              }
              stage('PHP FPM Testing') {
                agent { label 'ubuntu-18.04 && immutable' }
                when {
                  beforeAgent true
                  allOf {
                    expression { return env.DIST == "deb" }
                  }
                }
                steps {
                  packageWorkspace(context: "PHP-FPM-Testing-${DIST}", prepareGoal: "prepare-${DIST}-fpm") {
                    sh script: "make -C packaging ${DIST}-lifecycle-testing-in-fpm", label: "${DIST}-lifecycle-testing-in-fpm"
                  }
                }
              }
            }
          }
        }
      }
    }
    // This meta-stage happens in the internal-ci instance to be able to sign the artifacts correctly.
    stage('Release') {
      options {
        skipDefaultCheckout()
        timeout(time: 12, unit: 'HOURS')
      }
      when {
        beforeAgent true
        allOf {
          tag pattern: 'v\\d+.*', comparator: 'REGEXP'
          expression { isInternalCI() }
        }
      }
      agent { label 'ubuntu-18.04 && immutable' }
      environment {
        BUCKET_NAME = 'internal-ci-artifacts'
        BUCKET_SUBFOLDER = "${env.REPO}/${env.TAG_NAME}"
        BUCKET_PATH = "gs://${env.BUCKET_NAME}/${env.BUCKET_SUBFOLDER}"
        BUCKET_CREDENTIALS = 'internal-ci-gcs-plugin'
        SIGNED_ARTIFACTS = 'signed-artifacts'
        BUCKET_SUBFOLDER_SIGNED_ARTIFACTS = "${env.BUCKET_SUBFOLDER}/${env.SIGNED_ARTIFACTS}"
        BUCKET_SIGNED_ARTIFACTS_PATH = "gs://${env.BUCKET_NAME}/${env.BUCKET_SUBFOLDER_SIGNED_ARTIFACTS}"
        RELEASE_URL_MESSAGE = "(<https://github.com/elastic/apm-agent-php/releases/tag/${env.TAG_NAME}|${env.TAG_NAME}>)"
      }
      stages {
        stage('Notify') {
          options { skipDefaultCheckout() }
          steps {
            setEnvVar('PRE_RELEASE_STAGE', 'false')
            notifyStatus(slackStatus: 'warning', subject: "[${env.REPO}] Release ready to be pushed",
                         body: "Please (<${env.BUILD_URL}input|approve>) it or reject within 12 hours.\n Changes: ${env.TAG_NAME}")
            setEnvVar('RELEASE', askAndWait("You are about to release version ${env.TAG_NAME}. Do you wish to release it?"))
          }
        }
        stage('Signing CI') {
          when {
            beforeAgent true
            expression { return env.RELEASE == 'true' }
          }
          options { skipDefaultCheckout() }
          steps {
            deleteDir()
            unstash 'source'
            dir("${BASE_DIR}") {
              unstash 'package'
              googleStorageUpload(bucket: env.BUCKET_PATH,
                  credentialsId: env.BUCKET_CREDENTIALS,
                  pathPrefix: 'build/packages/',
                  pattern: 'build/packages/**/*',
                  sharedPublicly: false,
                  showInline: true)
              build(wait: true, propagate: true, job: 'elastic+unified-release+master+sign-artifacts-with-gpg', parameters: [string(name: 'gcs_input_path', value: "${env.BUCKET_PATH}")])
              dir("${SIGNED_ARTIFACTS}") {
                googleStorageDownload(bucketUri: "${env.BUCKET_SIGNED_ARTIFACTS_PATH}/*",
                    credentialsId: env.BUCKET_CREDENTIALS,
                    localDirectory: 'build/packages/',
                    pathPrefix: "${env.BUCKET_SUBFOLDER_SIGNED_ARTIFACTS}")
                stash allowEmpty: false, name: env.SIGNED_ARTIFACTS, useDefaultExcludes: false
              }
              archiveArtifacts(allowEmptyArchive: true, artifacts: "${SIGNED_ARTIFACTS}/**/*")
            }
          }
        }
        stage('Test-Signed-Package') {
          options { skipDefaultCheckout() }
          failFast false
          matrix {
            agent { label 'ubuntu-18.04 && immutable' }
            axes {
              axis {
                name 'PHP_VERSION'
                values '7.2', '7.3', '7.4', '8.0'
              }
            }
            stages {
              stage('Release Test') {
                steps {
                  initWorkspace(context: "Signed-Test-${PHP_VERSION}") {
                      unstash "${env.SIGNED_ARTIFACTS}"
                      sh script: "PHP_VERSION=${PHP_VERSION} make -C packaging install", label: 'package install'
                  }
                }
                post {
                  unsuccessful {
                    notifyStatus(slackStatus: 'warning', subject: "[${env.REPO}] Release *${env.TAG_NAME}* got some test failures in the installers.", body: "Please review the signed binaries are healthy (<${env.RUN_DISPLAY_URL}|Open>)")
                  }
                  always {
                    junit(allowEmptyResults: true, keepLongStdio: true, testResults: "${BASE_DIR}/build/phpunit-*junit.xml")
                  }
                }
              }
            }
          }
        }
        stage('Release CI') {
          when {
            beforeAgent true
            expression { return env.RELEASE == 'true' }
          }
          options { skipDefaultCheckout() }
          steps {
            deleteDir()
            unstash 'source'
            dir("${BASE_DIR}") {
              unstash "${env.SIGNED_ARTIFACTS}"
              withCredentials([string(credentialsId: '2a9602aa-ab9f-4e52-baf3-b71ca88469c7', variable: 'GITHUB_TOKEN')]) {
                sh script: 'make -f .ci/Makefile release', label: 'release'
              }
            }
          }
          post {
            success {
              notifyStatus(slackStatus: 'good', subject: "[${env.REPO}] Release *${env.TAG_NAME}* published", body: "Build: (<${env.RUN_DISPLAY_URL}|here>)\nRelease URL: ${env.RELEASE_URL_MESSAGE}")
            }
          }
        }
        stage('Test-Released-Package') {
          options { skipDefaultCheckout() }
          failFast false
          matrix {
            agent { label 'ubuntu-18.04 && immutable' }
            axes {
              axis {
                name 'PHP_VERSION'
                values '7.2', '7.3', '7.4', '8.0'
              }
            }
            stages {
              stage('Release Test') {
                steps {
                  initWorkspace(context: "Release-Test-${PHP_VERSION}") {
                      sh script: "PHP_VERSION=${PHP_VERSION} RELEASE_VERSION=${env.TAG_NAME.replaceAll('^v', '')} make -C packaging install-release-github", label: 'package install-release-github'
                  }
                }
                post {
                  unsuccessful {
                    notifyStatus(slackStatus: 'warning', subject: "[${env.REPO}] Release *${env.TAG_NAME}* published with some test failures in the installers.", body: "Please review the signed and released binaries are healthy\nBuild: (<${env.RUN_DISPLAY_URL}|here>)\nRelease URL: ${env.RELEASE_URL_MESSAGE}")
                  }
                  always {
                    junit(allowEmptyResults: true, keepLongStdio: true, testResults: "${BASE_DIR}/build/phpunit-*junit.xml")
                  }
                }
              }
            }
          }
        }
      }
      post {
        failure {
          notifyStatus(slackStatus: 'danger', subject: "[${env.REPO}] Release *${env.TAG_NAME}* failed", body: "Build: (<${env.RUN_DISPLAY_URL}|here>)")
        }
        always {
          script {
            currentBuild.description = "${currentBuild.description?.trim() ? currentBuild.description : ''} released"
          }
        }
      }
    }
  }
  post {
    cleanup {
      // Reporting disables in the `internal-ci` since credentials are not in place
      // OTOH it avoids duplicated notifications
      whenFalse(isInternalCI()){
        notifyBuildResult(prComment: true, analyzeFlakey: true, jobName: getFlakyJobName(withBranch: 'master'))
      }
    }
    failure {
      whenTrue(isInternalCI() && env.PRE_RELEASE_STAGE == 'true') {
        notifyStatus(slackStatus: 'danger', subject: "[${env.REPO}] Pre-release steps failed", body: "(<${env.RUN_DISPLAY_URL}|Open>)")
      }
    }
  }
}

/**
* A function to simplify the pipeline and the too large issue in groovy
*/
def packageGeneration(def args = [:]) {
    def local = args.get('local', false)
    args.versions.each { version ->
      unstash "generate-for-package-${version}-Dockerfile"
      unstash "generate-for-package-${version}-Dockerfile.alpine"
    }
    if (local) {
      // VERSION=1.0.0 is needed to override the current version.
      // current version is >1.0.0, and this is the way we can
      // run the agent upgrade testing with some local cached
      // agent distributions, this one and the current version one.
      sh script: "VERSION=1.0.0 make -C packaging package", label: 'package'
      sh script: "mv build/packages build/local", label: 'prepare-local-upgrade-agent'
    } else {
      // Archive the so files to be downloaded if possible.
      archiveArtifacts(allowEmptyArchive: true, artifacts: 'src/ext/modules/*.so')
      sh script: "make -C packaging package", label: 'package'
      sh script: "make -C packaging info", label: 'package info'
      // checksum files are regenerated by the signing component in the internal-ci instance.
      stash(includes: 'build/packages/*', name: 'package', excludes: 'build/packages/**/*.sha512')
    }
}

/**
* Init function to
* Send a GitHub Notification, clean the workspace. restore the source code and run
* the body in the BASE_DIR folder
*/
def initWorkspace(def args = [:], Closure body){
  prepareWorkspace(args) {
    dir("${BASE_DIR}"){
      body()
    }
  }
}

/**
* Package function to
* Send a GitHub Notification, clean the workspace and restore the source, the package code
* and run the body in the BASE_DIR folder
*/
def packageWorkspace(def args = [:], Closure body){
  prepareWorkspace(args) {
    dir("${BASE_DIR}"){
      unstash 'package'
      // When running in the CI sometimes the docker build might fail for
      // some environmental issues, let's retry
      retryWithSleep(retries: 3, seconds: 5, backoff: true) {
        sh script: "PHP_VERSION=${PHP_VERSION} make -C packaging ${args.prepareGoal}", label: "${args.prepareGoal} for ${PHP_VERSION}"
      }
      body()
    }
  }
}

/**
* Prepare function to
* Send a GitHub Notification, clean the workspace and restore the source code.
*/
def prepareWorkspace(def args = [:], Closure body){
  withGithubNotify(args) {
    deleteDir()
    unstash 'source'
    body()
  }
}

// TODO: create an input step to avoid this try/catch and return true/false
def askAndWait(message) {
  try {
    input(message: message, ok: 'Yes')
    return true
  } catch(err) {
    return false
  }
}

def notifyStatus(def args = [:]) {
  releaseNotification(slackChannel: "${env.SLACK_CHANNEL}",
                      slackColor: args.slackStatus,
                      slackCredentialsId: 'jenkins-slack-integration-token',
                      to: "${env.NOTIFY_TO}",
                      subject: args.subject,
                      body: args.body)
}

def prepareRelease() {
  def tagName = "v${params.VERSION}"
  def branchName = "prepare-release-${tagName}-${env.BUILD_NUMBER}"
  def message = "[${params.VERSION}] Bump version and create changelog"
  def warning = """> THIS PR IS AUTOMATICALLY GENERATED BY RELEASE PIPELINE."""
  def actions = """### Actions
* If changes are fine then:
  1. [Approve](${env.BUILD_URL}input) it. The pipeline will take care of the release.
  1. Close this PR since it is not required anymore.
  1. Delete branch ${branchName}.
* If changes are not correct then:
  1. [abort](${env.BUILD_URL}input) it.
  1. Change and commit changes to this PR.
  1. Merge this PR.
  1. Delete branch ${branchName}.
  1. Run release [build](${env.JOB_URL}) with the VERSION parameter = ${params.VERSION}"""
  def previousVersion = sh(label: 'Get previous version', script: 'make -f .ci/Makefile previous-version', returnStdout: true).trim()
  sh label: 'Bump version', script: "VERSION=${params.VERSION} BRANCH_NAME=${env.BRANCH_NAME} make -f .ci/Makefile bump-version"
  if (sh(label: 'is version bumped?', script: 'git diff-index --quiet HEAD --', returnStatus: true) > 0) {
    // Change ci-tag pointer to be used for generating the changelog
    gitCreateTag(tag: 'ci-tag', tagArgs: '--force', pushArgs: '--force')
    // Create Changelog and verify it contains what's expected.
    sh(label: 'Create changelog', script: "GITHUB_TOKEN=${GITHUB_TOKEN} TAG_NAME=${tagName} PREVIOUS_TAG=v${previousVersion} make -f .ci/Makefile prepare-changelog changelog")
    sh(label: "Git branch ${branchName}", script: """git checkout -b ${branchName}""")
    sh(label: 'Git commit', script: """git commit -a -m "${message}" """)
    def pr = githubCreatePullRequest(title: "[RELEASE] ${params.VERSION}",
                                     description: "${warning}\n\n${actions}",
                                     labels: 'docs,release,changelog')
    notifyStatus(slackStatus: 'warning', subject: "[${env.REPO}] Prepare ${params.VERSION} release steps to be validated.",
                 body: """Please (<${env.BUILD_URL}input|approve>) it or reject within 12 hours ONLY If no changes are required. Otherwise stop it and review the (<${pr}|PR>).""")
    if (askAndWait("You are about to release version ${params.VERSION}. If you approve then changes will be committed and pushed. Review ${pr}.")) {
      // Update branch.
      sh(label: "Git branch ${env.BRANCH_NAME}", script: """git checkout ${env.BRANCH_NAME}""")
      sh(label: 'Git rebase', script: """git rebase ${branchName}""")
      gitPush(args: "${env.BRANCH_NAME}")
      gitCreateTag(tag: "${tagName}")
    } else {
      log(level: 'WARN', text: "Please review the PR ${pr}")
    }
  } else {
    gitCreateTag(tag: "${tagName}")
    log(level: 'INFO', text: "There are no changes to compare with. Release will happen from this commit.")
  }
}
