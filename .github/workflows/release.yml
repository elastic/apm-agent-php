---
name: release

permissions:
  contents: read

on:
  create:
    tags: [ "v*" ]

jobs:

  build:
    uses: ./.github/workflows/build.yml

  build-packages:
    needs:
      - build
    uses: ./.github/workflows/build-packages.yml

  sign:
    runs-on: ubuntu-latest
    needs:
      - build-packages
    env:
      BUCKET_NAME: "apm-agent-php"
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: package
          path: build/packages

      ## NOTE: The name of the zip should match the name of the folder to be zipped.
      - name: Prepare packages to be signed
        run: |-
          cd build
          zip -r packages.zip packages/

      - name: 'Get service account'
        uses: hashicorp/vault-action@v2.7.3
        with:
          url: ${{ secrets.VAULT_ADDR }}
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          method: approle
          secrets: |
            secret/observability-team/ci/apm-agent-php-bucket service-account | SERVICE_ACCOUNT ;

      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ env.SERVICE_ACCOUNT }}'

      - id: 'upload-file'
        uses: 'google-github-actions/upload-cloud-storage@v1'
        with:
          path: "build/packages.zip"
          destination: "${{ env.BUCKET_NAME }}/${{ github.run_id }}"
          predefinedAcl: "publicRead"

      - id: buildkite
        name: Run buildkite pipeline
        uses: elastic/apm-pipeline-library/.github/actions/buildkite@current
        with:
          vaultUrl: ${{ secrets.VAULT_ADDR }}
          vaultRoleId: ${{ secrets.VAULT_ROLE_ID }}
          vaultSecretId: ${{ secrets.VAULT_SECRET_ID }}
          pipeline: observability-robots-php-release
          triggerMessage: "${{ github.repository }}@${{ github.ref_name }} - sign artifacts"
          waitFor: true
          printBuildLogs: true
          artifactName: signed-artifacts
          artifactPath: "signed-artifacts.zip"
          buildEnvVars: |
            BUNDLE_URL=https://storage.googleapis.com/${{ env.BUCKET_NAME }}/${{ steps.upload-file.outputs.uploaded }}

  generate-test-packages-matrix:
    uses: ./.github/workflows/generate-matrix.yml

  test-packages:
    needs:
      - sign
      - generate-test-packages-matrix
    uses: ./.github/workflows/test-packages.yml
    with:
      include: ${{ needs.generate-test-packages-matrix.outputs.include }}
      max-parallel: 40

  release:
    needs:
      - test-packages
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      GITHUB_TOKEN: ${{ github.token }}
      TAG_NAME: ${{ github.ref_name }}
    steps:

      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: signed-artifacts
          path: build/packages

      - name: Unzip signed packages
        run: |-
          cd build/packages
          unzip signed-artifacts.zip

      - name: Create draft release
        run: |-
          make -f .ci/Makefile draft-release
          echo "RELEASE_ID=$(make -f .ci/Makefile get-draft-release)" >> $GITHUB_ENV

      - name: Verify draft release
        run: ORIGINAL_PACKAGES_LOCATION=build/packagesmake -f .ci/Makefile download-verify

      - name: Publish release
        run: make -f .ci/Makefile github-release-ready

  notify:
    if: always()
    needs:
      - build
      - build-packages
      - generate-test-packages-matrix
      - release
      - sign
      - test-packages
    runs-on: ubuntu-latest
    steps:
      - id: check
        uses: elastic/apm-pipeline-library/.github/actions/check-dependent-jobs@current
        with:
          needs: ${{ toJSON(needs) }}
      - uses: elastic/apm-pipeline-library/.github/actions/notify-build-status@current
        with:
          status: ${{ steps.check.outputs.status }}
          vaultUrl: ${{ secrets.VAULT_ADDR }}
          vaultRoleId: ${{ secrets.VAULT_ROLE_ID }}
          vaultSecretId: ${{ secrets.VAULT_SECRET_ID }}
          slackChannel: "#apm-agent-php"
          message: "[${{ github.repository }}] Release (<${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }}|${{ github.ref_name }}>)"
