---
name: release

permissions:
  contents: read

on:
  workflow_dispatch:
  ### TODO: listen for tags, so for now let's test whether it works in dry run mode by default
  #create:
  #  tags: [ "v*" ]

jobs:
  build:
    name: build-agent-library
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        arch:
          - "linux-x86-64"
          - "linuxmusl-x86-64"
    env:
      BUILD_ARCHITECTURE: ${{ matrix.arch }}
    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: make -f .ci/Makefile build
      - uses: actions/upload-artifact@v3
        with:
          name: package-parts-${{ matrix.arch }}
          path: |
            agent/native/_build/${{ matrix.arch }}-release/ext/elastic_apm*.so
            agent/native/_build/${{ matrix.arch }}-release/ext/elastic_apm*.debug

  build-packages:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: package-parts-linux-x86-64
          path: agent/native/_build/linux-x86-64-release/ext
      - uses: actions/download-artifact@v3
        with:
          name: package-parts-linuxmusl-x86-64
          path: agent/native/_build/linuxmusl-x86-64-release/ext
      - name: package
        run: make -C packaging package
      - name: package info
        run: make -C packaging info
      - uses: actions/upload-artifact@v3
        with:
          name: package
          path: |
            build/packages/*
            !build/packages/**/*.sha512

  sign:
    runs-on: ubuntu-latest
    needs:
      - build-packages
    env:
      BUCKET_NAME: "apm-agent-php"
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: package
          path: build/packages

      - name: Prepare packages to be signed
        run: |-
          cd build
          zip -r unsigned.zip packages/

      - name: 'Get service account'
        uses: hashicorp/vault-action@v2.7.3
        with:
          url: ${{ secrets.VAULT_ADDR }}
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          method: approle
          secrets: |
            secret/observability-team/ci/apm-agent-php-bucket service-account | SERVICE_ACCOUNT ;

      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ env.SERVICE_ACCOUNT }}'

      - id: 'upload-file'
        uses: 'google-github-actions/upload-cloud-storage@v1'
        with:
          path: "build/unsigned.zip"
          destination: "${{ env.BUCKET_NAME }}/${{ github.run_id }}"
          predefinedAcl: "publicRead"

      - id: buildkite
        name: Run buildkite pipeline
        uses: elastic/apm-pipeline-library/.github/actions/buildkite@current
        with:
          vaultUrl: ${{ secrets.VAULT_ADDR }}
          vaultRoleId: ${{ secrets.VAULT_ROLE_ID }}
          vaultSecretId: ${{ secrets.VAULT_SECRET_ID }}
          pipeline: observability-robots-php-release
          triggerMessage: "${{ github.repository }}@${{ github.ref_name }} - sign artifacts"
          waitFor: true
          printBuildLogs: true
          artifactName: signed-artifacts
          artifactPath: "signed-artifacts.zip"
          buildEnvVars: |
            DOWNLOAD=https://storage.googleapis.com/${{ env.BUCKET_NAME }}/${{ steps.upload-file.outputs.uploaded }}

  generate-test-packages-matrix:
    runs-on: ubuntu-latest
    outputs:
      include: ${{ steps.generate.outputs.matrix }}
    needs:
      - sign
    steps:
      - uses: actions/checkout@v3
      - id: generate
        run: |
          MATRIX=$(.ci/generate_package_lifecycle_test_matrix.sh | jq --raw-input --slurp -c 'split("\n") | map(select(length > 0)) | map(split(",")) | map({ "item": . } )')
          echo "matrix=${MATRIX}" >> $GITHUB_OUTPUT

  test-packages:
    timeout-minutes: 120
    needs:
      - generate-test-packages-matrix
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 20
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.generate-test-packages-matrix.outputs.include) }}
    env:
      PHP_VERSION: ${{ matrix.item[0] }}
      LINUX_PACKAGE_TYPE: ${{ matrix.item[1] }}
      TESTING_TYPE: ${{ matrix.item[2] }}
      ELASTIC_APM_PHP_TESTS_MATRIX_ROW: "${{ join(matrix.item, ',') }}"
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: signed-artifacts
          path: build/packages

      - name: Unzip signed packages
        run: |-
          cd build/packages
          unzip signed-artifacts.zip

      - uses: actions/download-artifact@v3
        with:
          name: package-parts-linux-x86-64
          path: agent/native/_build/linux-x86-64-release/ext
      - uses: actions/download-artifact@v3
        with:
          name: package-parts-linuxmusl-x86-64
          path: agent/native/_build/linuxmusl-x86-64-release/ext

      - if: ${{ env.TESTING_TYPE == 'lifecycle' }}
        name: lifecycle test
        run: |
          make -C packaging "prepare-${LINUX_PACKAGE_TYPE}"
          make -C packaging "${LINUX_PACKAGE_TYPE}-lifecycle-testing"

      - if: ${{ startsWith(env.TESTING_TYPE, 'lifecycle-') }}
        name: lifecycle test on prod server
        run: |
          make -C packaging prepare-${LINUX_PACKAGE_TYPE}-${TESTING_TYPE#lifecycle-}
          make -C packaging "${LINUX_PACKAGE_TYPE}-lifecycle-testing-in-${TESTING_TYPE#lifecycle-}"

      - if: ${{ env.TESTING_TYPE == 'php-upgrade' }}
        name: php upgrade test
        run: |
          make -C packaging "prepare-${LINUX_PACKAGE_TYPE}"
          make -C packaging "${LINUX_PACKAGE_TYPE}-php-upgrade-testing"

      ## Agent upgrade requires to build the package with a different version
      ## Then download the packages for the current version.
      ## Run the upgrade testing.
      - if: ${{ env.TESTING_TYPE == 'agent-upgrade' }}
        name: agent upgrade test - prepare
        run: |
          mv build/packages build/backup
          VERSION=1.0.0 make -C packaging package
          mv build/packages build/local
          mv build/backup build/packages
          make -C packaging "${LINUX_PACKAGE_TYPE}-agent-upgrade-testing-local"

      - if: success() || failure()
        name: Prepare test result files
        run: >-
          find build
          -name "*junit.xml"
          -exec bash -c 'mv {} "build/${ELASTIC_APM_PHP_TESTS_MATRIX_ROW}-$(basename {})"'
          \;

      - if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: build/*junit.xml
          if-no-files-found: error

      # Store syslog
      - if: failure()
        name: Prepare syslog files
        continue-on-error: true
        run: |-
          mkdir build/syslog-files
          cd build/syslog || true
          find . -name "syslog" -exec bash -c 'cp {} "../syslog-files/${ELASTIC_APM_PHP_TESTS_MATRIX_ROW//[^[:alnum:]]/-}-$(basename {})"' \;
          find . -name "messages" -exec bash -c 'cp {} "../syslog-files/${ELASTIC_APM_PHP_TESTS_MATRIX_ROW//[^[:alnum:]]/-}-$(basename {})"' \;
      - if: failure()
        uses: actions/upload-artifact@v3
        continue-on-error: true
        with:
          name: syslogs
          path: build/syslog-files/

  release:
    needs:
      - test-packages
    runs-on: ubuntu-latest
    steps:
      - name: Create draft release
        run: |-
          echo "make -f .ci/Makefile draft-release"
          echo "RELEASE_ID=$(make -f .ci/Makefile get-draft-release)" >> $GITHUB_ENV


      - uses: actions/download-artifact@v3
        with:
          name: signed-artifacts
          path: build/packages

      - name: Unzip signed packages
        run: |-
          cd build/packages
          unzip signed-artifacts.zip

      - name: Verify draft release
        run: echo "make -f .ci/Makefile download-verify"
        env:
          TAG_NAME: ${{ github.ref_name }}
          ORIGINAL_PACKAGES_LOCATION: build/packages

      - name: Publish release
        run: echo "Publish release githubReleasePublish"
        env:
          TAG_NAME: ${{ github.ref_name }}

      - if: ${{ success() }}
        uses: elastic/apm-pipeline-library/.github/actions/slack-message@current
        with:
          url: ${{ secrets.VAULT_ADDR }}
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          #channel: "#apm-agent-php"
          channel: "#on-week-oblt-productivity"
          message: |
            :runner: [${{ github.repository }}] Release *${{ github.ref_name }}* has been triggered in Buildkite: (<${{ steps.buildkite.outputs.build }}|build>)

      - if: ${{ failure() }}
        uses: elastic/apm-pipeline-library/.github/actions/slack-message@current
        with:
          url: ${{ secrets.VAULT_ADDR }}
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          #channel: "#apm-agent-php"
          channel: "#on-week-oblt-productivity"
          message: |
            :ghost: [${{ github.repository }}] Release *${{ github.ref_name }}* didn't get triggered in Buildkite.
            Build: (<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|here>)
