---
# Runs the test packages based on the provided files in test.yml
name: test-packages

on:
  workflow_call:
    inputs:
      include:
        required: true
        type: string
      max-parallel:
        description: "Set the maximum number of jobs that can run simultaneously in the matrix"
        default: 20
        required: false
        type: number
      package-name:
        description: "The artifact name with the binaries to be tested"
        required: false
        type: string

permissions:
  contents: read

jobs:
  test-packages:
    timeout-minutes: 120
    runs-on: ubuntu-latest
    strategy:
      max-parallel: ${{ inputs.max-parallel }}
      fail-fast: false
      matrix:
        include: ${{ fromJSON(inputs.include) }}
    env:
      PHP_VERSION: ${{ matrix.item[0] }}
      LINUX_PACKAGE_TYPE: ${{ matrix.item[1] }}
      TESTING_TYPE: ${{ matrix.item[2] }}
      ELASTIC_APM_PHP_TESTS_MATRIX_ROW: "${{ join(matrix.item, ',') }}"
      BUILD_PACKAGES: build/packages
    permissions:
      contents: read
      packages: read
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        if: ${{ inputs.package-name }}
        with:
          name: ${{ inputs.package-name }}
          path: ${{ env.BUILD_PACKAGES }}

      - uses: actions/download-artifact@v4
        if: ${{ ! inputs.package-name }}
        with:
          pattern: 'package*'
          merge-multiple: true
          path: ${{ env.BUILD_PACKAGES }}

      - name: Log in to the Container registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      ## This will help with preparing the signed artifacts that were bundled in a zip file
      - if: ${{ inputs.package-name == 'signed-artifacts' }}
        name: Unzip signed packages
        run: unzip ${PACKAGE_FILE} && rm ${PACKAGE_FILE}
        working-directory: ${{ env.BUILD_PACKAGES }}
        env:
          PACKAGE_FILE: "${{ inputs.package-name }}.zip"

      - uses: actions/download-artifact@v4
        with:
          name: package-parts-linux-x86-64
          path: agent/native/_build/linux-x86-64-release

      - uses: actions/download-artifact@v4
        with:
          name: package-parts-linuxmusl-x86-64
          path: agent/native/_build/linuxmusl-x86-64-release

      - name: Remove ARM64 artifacts
        run: |
          rm ${BUILD_PACKAGES}/apm-agent-php*arm64*
          rm ${BUILD_PACKAGES}/apm-agent-php*aarch64*

      - if: ${{ env.TESTING_TYPE == 'lifecycle' }}
        name: lifecycle test
        run: |
          make -C packaging "prepare-${LINUX_PACKAGE_TYPE}"
          make -C packaging "${LINUX_PACKAGE_TYPE}-lifecycle-testing"

      - if: ${{ startsWith(env.TESTING_TYPE, 'lifecycle-') }}
        name: lifecycle test on prod server
        run: |
          make -C packaging prepare-${LINUX_PACKAGE_TYPE}-${TESTING_TYPE#lifecycle-}
          make -C packaging "${LINUX_PACKAGE_TYPE}-lifecycle-testing-in-${TESTING_TYPE#lifecycle-}"

      - if: ${{ env.TESTING_TYPE == 'php-upgrade' }}
        name: php upgrade test
        run: |
          make -C packaging "prepare-${LINUX_PACKAGE_TYPE}"
          make -C packaging "${LINUX_PACKAGE_TYPE}-php-upgrade-testing"

      ## Agent upgrade requires to build the package with a different version
      ## Then download the packages for the current version.
      ## Run the upgrade testing.
      - if: ${{ env.TESTING_TYPE == 'agent-upgrade' }}
        name: agent upgrade test - prepare
        run: |
          mv ${{ env.BUILD_PACKAGES }} build/backup
          VERSION=1.0.0 make -C packaging package
          mv ${{ env.BUILD_PACKAGES }} build/local
          mv build/backup ${{ env.BUILD_PACKAGES }}
          make -C packaging "${LINUX_PACKAGE_TYPE}-agent-upgrade-testing-local"

      - if: success() || failure()
        name: Prepare test result files
        run: >-
          find build
          -name "*junit.xml"
          -exec bash -c 'mv {} "build/${ELASTIC_APM_PHP_TESTS_MATRIX_ROW}-$(basename {})"'
          \;

      - if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ env.ELASTIC_APM_PHP_TESTS_MATRIX_ROW }}
          path: build/*junit.xml
          if-no-files-found: error

      # Store syslog
      - if: failure()
        name: Prepare syslog files
        continue-on-error: true
        run: |-
          mkdir build/syslog-files
          cd build/syslog || true
          find . -name "syslog" -exec bash -c 'cp {} "../syslog-files/${ELASTIC_APM_PHP_TESTS_MATRIX_ROW//[^[:alnum:]]/-}-$(basename {})"' \;
          find . -name "messages" -exec bash -c 'cp {} "../syslog-files/${ELASTIC_APM_PHP_TESTS_MATRIX_ROW//[^[:alnum:]]/-}-$(basename {})"' \;
      - if: failure()
        uses: actions/upload-artifact@v4
        continue-on-error: true
        with:
          name: syslogs-${{ env.ELASTIC_APM_PHP_TESTS_MATRIX_ROW }}
          path: build/syslog-files/
