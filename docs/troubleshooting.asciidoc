[[troubleshooting]]
== Troubleshooting

Is something not working as expected?
Don't worry if you can't figure out what the problem is; weâ€™re here to help!
As a first step, ensure your app is compatible with the agent's <<supported-technologies,supported technologies>>.

If you're an existing Elastic customer with a support contract, please create a ticket in the
https://support.elastic.co/customers/s/login/[Elastic Support portal].
Other users can post in the https://discuss.elastic.co/c/apm[APM discuss forum].

IMPORTANT: *Please upload your complete debug logs* to a service like https://gist.github.com[GitHub Gist]
so that we can analyze the problem.
Logs should include everything from when the application starts up until the first request executes.

[float]
[[disable-agent]]
=== Disable the Agent

In the unlikely event the agent causes disruptions to a production application,
you can disable the agent while you troubleshoot.

Disable the agent by setting <<config-enabled,`enabled`>> to `false`.
You'll need to restart your application for the changes to apply.

// ****This is the boilerplate disable text. Until dynamic config is supported, it's commented out.****
// If you have access to <<dynamic-configuration,dynamic configuration>>,
// you can disable the recording of events by setting <<config-recording,`recording`>> to `false`.
// When changed at runtime from a supported source, there's no need to restart your application.

// If that doesn't work, or you don't have access to dynamic configuration, you can disable the agent by setting
// <<config-enabled,`enabled`>> to `false`.
// You'll need to restart your application for the changes to apply.

[float]
[[dev-internal-config-disclaimer]]
=== Disclaimer for `dev_internal_*` configuration options
Configuration options starting with `dev_internal_` should be used only for supportability.
It's recommended to have these options in the configuration for the short periods of time
while resolving an issue with the agent.
There is no backward compatability guarantee for these options
so any one can be changed and/or removed even in a minor or patch release.

[float]
[[enable-verbose-log-backend-comm]]
=== Enable verbose log for backend communication
Configuration option `dev_internal_backend_comm_log_verbose` can be used
to enable verbose log for the agent's communication with Elastic APM Server.

[options="header"]
|============
| Environment variable name      | Option name in `php.ini`
| `ELASTIC_APM_DEV_INTERNAL_BACKEND_COMM_LOG_VERBOSE` | `elastic_apm.dev_internal_backend_comm_log_verbose`
|============

[options="header"]
|============
| Default    | Type
| `false`    | Boolean
|============

The log is written under `INFO` level - see <<configure-logging>>.

Also see <<dev-internal-config-disclaimer>>.

=== Agent is not instrumenting code
[source,bash]

==== open_basedir issue

If you see a similar entry in the agent log, this indicates an incorrect open_basedir configuration. Please read the details in the <<limitations, limitations>>
----
[Elastic APM PHP Tracer] 2023-08-23 14:38:12.223397+02:00 [PID: 268995] [TID: 268995] [WARNING]  [Lifecycle] [lifecycle.cpp:558] [elasticApmModuleInit] Elastic Agent bootstrap file (/home/paplo/sources/apm-agent-php/agent/php/bootstrap_php_part.php) is located outside of paths allowed by open_basedir ini setting. Read more details here https://www.elastic.co/guide/en/apm/agent/php/current/setup.html
----

=== Collection of diagnostic information

For a more detailed analysis of issues, it is necessary to collect diagnostic information. The agent allows for the automatic collection of such information - all data will be saved to the file specified in the configuration.

There are two possible ways to enable this feature:

. By php.ini - To enable this feature, you need to modify the php.ini file (or 99-elastic.ini) and provide the path to the file where the data will be saved, f.ex:
[source,ini]
elastic_apm.debug_diagnostic_file=/tmp/php_diags_%p_%t.txt

. By environment variable. You can also enable information collection using the environment variable `ELASTIC_APM_DEBUG_DIAGNOSTIC_FILE`. It must be exported or directly specified when running php process.
Example of calling php-cli script:
[source,ini]
ELASTIC_APM_DEBUG_DIAGNOSTIC_FILE=/tmp/php_diags_%p_%t.txt php test.php

Remember, the provided file path must be writable by the PHP process.

If there are multiple PHP processes in your system, we allow you to specify directives in the diagnostic file name. This way, the files will remain unique and won't be overwritten.

* `%p` - In this place, the agent will substitute the process identifier.

* `%t` - In this place, the agent will substitute the UNIX timestamp.

IMPORTANT: After setting the path, remember to *fully restart the process* for which you are collecting diagnostic information. This may vary depending on the context, such as PHP, PHP-FPM, Apache, or PHP-CGI. Diagnostic information will be recorded after the first HTTP request is made or at the beginning of script execution for PHP-CLI. +
 +
Please also be aware that the information contained in the output file may include sensitive data, such as passwords, security tokens or environment variables from your system. Make sure to review the data and mask sensitive information before sharing the file publicly. +
 +
After collecting diagnostic information, remember to disable this feature and restore the previous configuration in php.ini or the environment variable.


What information will be collected:

* Process identifier and parent process identifier
* User identifier of the worker process
* List of loaded PHP extensions
* Result from the phpinfo() function
* Process memory information and memory maps (`/proc/{id}/maps` and `/proc/{id}/smaps_rollup`)
* Process status information (`/proc/{id}/status`)