<?php

declare(strict_types=1);

namespace ElasticApmTests\UnitTests\ConfigTests;

use Elastic\Apm\Impl\Config\IntOptionParser;
use Elastic\Apm\Impl\Config\NumericOptionParser;
use ElasticApmTests\Util\RandomUtilForTests;

/**
 * @extends NumericOptionTestValuesGeneratorBase<int>
 */
class IntOptionTestValuesGenerator extends NumericOptionTestValuesGeneratorBase
{
    /** @var IntOptionParser */
    protected $optionParser;

    public function __construct(IntOptionParser $optionParser)
    {
        $this->optionParser = $optionParser;
    }

    /**
     * @return IntOptionParser
     */
    protected function optionParser(): NumericOptionParser
    {
        return $this->optionParser;
    }

    /**
     * @return int
     */
    final protected static function maxValueSupportedByType(): int
    {
        return PHP_INT_MAX;
    }

    /**
     * @return int
     */
    final protected static function minValueSupportedByType(): int
    {
        return PHP_INT_MIN;
    }

    /**
     * @return iterable<OptionTestValidValue<int>>
     */
    protected function manualInterestingValues(): iterable
    {
        return self::intManualInterestingValues();
    }

    /**
     * @return iterable<int>
     */
    protected function autoGeneratedInterestingValuesToDiff(): iterable
    {
        return self::intInterestingValuesToDiff();
    }

    /**
     * @return iterable<int>
     */
    protected function autoGeneratedInterestingValueDiffs(): iterable
    {
        return self::intInterestingDiffs();
    }

    /**
     * @param int $min
     * @param int $max
     *
     * @return int
     *
     * @noinspection PhpMissingParamTypeInspection
     */
    protected static function randomValue($min, $max)
    {
        return RandomUtilForTests::generateIntInRange($min, $max);
    }

    /**
     * @param int $value
     *
     * @return OptionTestValidValue<int>
     *
     * @noinspection PhpMissingParamTypeInspection
     */
    protected static function createOptionTestValidValue($value)
    {
        return new OptionTestValidValue(strval($value), $value);
    }

    public function invalidRawValues(): iterable
    {
        yield from ['0.0', '1.0', '-1.0', '1.5', '-1.5', '20.2', '-30.3'];
        yield from parent::invalidRawValues();
    }
}
